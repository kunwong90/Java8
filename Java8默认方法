在Java8中声明接口时，允许在接口中提供默认的实现方法，这在之前的jdk版本中是不允许的。
Java8中提供了两种实现方式，第一种是在接口中声明静态方法；第二种是通过声明默认方法。
今天主要看下默认方法。
在Java语言中，一个类只能继承一个父类，但却可以实现多个接口，随着Java8引入了默认方法，
就会有可能出现一个类实现了具有相同默认方法的多个接口。这种情况下，类会选择使用哪一个函数？
如下面这段代码：

public interface A {
	default void hello() {
		System.out.println("Hello from A");
	}
}

public interface B extends A {
	default void hello() {
		System.out.println("Hello from B");
	}
}


public class C implements B, A {
	public static void main(String[] args) {
		new C().hello();
	}
}

上面的这段代码会输出什么？
下面我们看看如何解决这个问题。如果一个类使用相同的函数签名从某个地方(比如另一个类或接口)继承了方法，通过三条规则可以进行判断。
(1)类中的优先级最高。类或父类中声明的方法的优先级高于任何声明为默认方法的优先级
(2)如果无法依据第一条判断，那么子接口的优先级更高：函数签名相同时，优先选择拥有最具体实现的默认方法的接口，即如果B继承了A，那么B就比A更加具体。
(3)最后如果还是无法判断，继承了多个接口的类必须通过显示覆盖和调用期望的方法，显示的选择使用哪一个默认方法的实现。
通过上面三条规则，我们可以清楚的知道会输出Hello from B

如果我们把上面的代码稍微修改以下：

public class D implements A {}

public class C extends D implements B, A {
	public static void main(String[] args) {
		new C().hello();
	}
}

这段代码又会输出什么呢？
依据规则(1)，类中声明的方法具有更高的优先级。D并未覆盖hello方法，可是它实现了接口A。所以它就拥有了接口A的默认方法。
规则(2)说如果类或者父类没有对应的方法，那么就应该选择提供了最具体实现的接口中的方法。
因此，编译器会在接口A和接口B的hello方法之间做选择。由于B更加具体，所以程序会再次打印输出Hello from B
再看下面这个例子

public interface A {
	default void hello() {
		System.out.println("Hello from A");
	}
}

public interface B {
	default void hello() {
		System.out.println("Hello from B");
	}
}

public class C implements B, A {}

上面代码可以编译通过吗？答案是否定的。因为从编译器的角度看没有哪一个接口的实现更加具体，所以会编译失败。
怎么解决这个问题呢？我们只能显示地决定希望在C中调用哪一个方法。
Java8中引入了一种新的语法X.super.m(...)，其中X是我们希望调用地m方法所在地父接口。

public class C implements B, A {

	@Override
	public void hello() {
		B.super.hello();
	}
}

上面就是我们希望调用来自于B的默认方法。
我们再考虑最后一种情况

public interface A {
	default void hello() {
		System.out.println("Hello from A");
	}
}

public interface B extends A {}

public interface C extends A {}

public class D implements B, C {
	public static void main(String[] args) {
		new D().hello();
	}
}

只有A声明了一个默认方法，由于这个接口是D的父接口，代码会打印输出Hello from A
如果把接口C中添加一个抽象的hello方法

public interface C extends A {
	void hello();
}

在类D中需要为hello显示地添加实现，否则无法通过编译。
